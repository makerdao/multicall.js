{"version":3,"file":"multicall.esm.js","sources":["../src/helpers.js","../src/aggregate.js","../src/watcher.js"],"sourcesContent":["import fetch from 'cross-fetch';\nimport { defaultAbiCoder } from 'ethers/utils/abi-coder';\nimport debug from 'debug';\nconst log = debug('multicall');\n\n// Function signature for: aggregate((address,bytes)[])\nexport const AGGREGATE_SELECTOR = '0x252dba42';\n\nexport function strip0x(str) {\n  return str.replace(/^0x/, '');\n}\n\nexport function typesLength(types) {\n  return types.length;\n}\n\nexport function encodeParameter(type, val) {\n  return encodeParameters([type], [val]);\n}\n\nexport function encodeParameters(types, vals) {\n  return defaultAbiCoder.encode(types, vals);\n}\n\nexport function decodeParameter(type, val) {\n  return decodeParameters([type], val);\n}\n\nexport function decodeParameters(types, vals) {\n  return defaultAbiCoder.decode(types, '0x' + vals.replace(/0x/i, ''));\n}\n\nexport function padLeft(string, chars, sign) {\n  var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n  string = string.toString(16).replace(/^0x/i, '');\n  var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;\n  return (\n    (hasPrefix ? '0x' : '') +\n    new Array(padding).join(sign ? sign : '0') +\n    string\n  );\n}\n\nexport function padRight(string, chars, sign) {\n  var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n  string = string.toString(16).replace(/^0x/i, '');\n  var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;\n  return (\n    (hasPrefix ? '0x' : '') +\n    string +\n    new Array(padding).join(sign ? sign : '0')\n  );\n}\n\nexport function isEmpty(obj) {\n  if (Array.isArray(obj)) return obj.length === 0;\n  return !obj || Object.keys(obj).length === 0;\n}\n\nexport async function ethCall(rawData, { id, web3, ethers, rpcUrl, block, chain, multicallAddress, ws, wsResponseTimeout }) {\n  const abiEncodedData = AGGREGATE_SELECTOR + strip0x(rawData);\n  if (ws) {\n    log('Sending via WebSocket');\n    return new Promise((resolve, reject) => {\n      ws.send(JSON.stringify({\n        jsonrpc: '2.0',\n        method: 'eth_call',\n        chain,\n        params: [\n          {\n            to: multicallAddress,\n            data: abiEncodedData\n          },\n          block || 'latest'\n        ],\n        id\n      }));\n      function onMessage(data) {\n        if (typeof data !== 'string') data = data.data;\n        const json = JSON.parse(data);\n        if (!json.id || json.id !== id) return;\n        log('Got WebSocket response id #%d', json.id);\n        clearTimeout(timeoutHandle);\n        ws.onmessage = null;\n        resolve(json.result);\n      }\n      const timeoutHandle = setTimeout(() => {\n        if (ws.onmessage !== onMessage) return;\n        ws.onmessage = null;\n        reject(new Error('WebSocket response timeout'));\n      }, wsResponseTimeout);\n\n      ws.onmessage = onMessage;\n    });\n  }\n  else if (ethers) {\n    log('Sending via ethers provider');\n    return ethers.send({\n      method: 'eth_call',\n      chain,\n      params: [\n        {\n          to: multicallAddress,\n          data: abiEncodedData\n        },\n        block || 'latest'\n      ]\n    })\n  }\n  else if (web3) {\n    log('Sending via web3 provider');\n    return web3.eth.call({\n      to: multicallAddress,\n      data: abiEncodedData\n    });\n  } else {\n    log('Sending via XHR fetch');\n    const rawResponse = await fetch(rpcUrl, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        jsonrpc: '2.0',\n        method: 'eth_call',\n        chain,\n        params: [\n          {\n            to: multicallAddress,\n            data: abiEncodedData\n          },\n          block || 'latest'\n        ],\n        id: 1\n      })\n    });\n    const content = await rawResponse.json();\n    if (!content || !content.result) {\n      throw new Error('Multicall received an empty response. Check your call configuration for errors.');\n    }\n    return content.result;\n  }\n}\n","import { id as keccak256 } from 'ethers/utils/hash';\nimport invariant from 'invariant';\nimport { strip0x, ethCall, encodeParameters, decodeParameters } from './helpers.js';\nimport memoize from 'lodash/memoize';\n\nconst INSIDE_EVERY_PARENTHESES = /\\(.*?\\)/g;\nconst FIRST_CLOSING_PARENTHESES = /^[^)]*\\)/;\n\nexport function _makeMulticallData(calls) {\n  const values = [\n    calls.map(({ target, method, args, returnTypes }) => [\n      target,\n      keccak256(method).substr(0, 10) +\n        (args && args.length > 0\n          ? strip0x(encodeParameters(args.map(a => a[1]), args.map(a => a[0])))\n          : '')\n    ])\n  ];\n  const calldata = encodeParameters(\n    [\n      {\n        components: [{ type: 'address' }, { type: 'bytes' }],\n        name: 'data',\n        type: 'tuple[]'\n      }\n    ],\n    values\n  );\n  return calldata;\n}\n\nconst makeMulticallData = memoize(_makeMulticallData, (...args) => JSON.stringify(args));\n\nexport default async function aggregate(calls, config) {\n  calls = Array.isArray(calls) ? calls : [calls];\n\n  const keyToArgMap = calls.reduce((acc, { call, returns }) => {\n    const [, ...args] = call;\n    if (args.length > 0) {\n      for (let returnMeta of returns) {\n        const [key] = returnMeta;\n        acc[key] = args;\n      }\n    }\n    return acc;\n  }, {});\n\n  calls = calls.map(({ call, target, returns }) => {\n    if (!target) target = config.multicallAddress;\n    const [method, ...argValues] = call;\n    const [argTypesString, returnTypesString] = method\n      .match(INSIDE_EVERY_PARENTHESES)\n      .map(match => match.slice(1, -1));\n    const argTypes = argTypesString.split(',').filter(e => !!e);\n    invariant(\n      argTypes.length === argValues.length,\n      `Every method argument must have exactly one type.\n          Comparing argument types ${JSON.stringify(argTypes)}\n          to argument values ${JSON.stringify(argValues)}.\n        `\n    );\n    const args = argValues.map((argValue, idx) => [argValue, argTypes[idx]]);\n    const returnTypes = !!returnTypesString ? returnTypesString.split(',') : [];\n    return {\n      method: method.match(FIRST_CLOSING_PARENTHESES)[0],\n      args,\n      returnTypes,\n      target,\n      returns\n    };\n  });\n\n  const callDataBytes = makeMulticallData(calls, false);\n  const outerResults = await ethCall(callDataBytes, config);\n  const returnTypeArray = calls\n    .map(({ returnTypes }) => returnTypes)\n    .reduce((acc, ele) => acc.concat(ele), []);\n  const returnDataMeta = calls\n    .map(({ returns }) => returns)\n    .reduce((acc, ele) => acc.concat(ele), []);\n\n  invariant(\n    returnTypeArray.length === returnDataMeta.length,\n    'Missing data needed to parse results'\n  );\n\n  const outerResultsDecoded = decodeParameters(['uint256', 'bytes[]'], outerResults);\n  const blockNumber = outerResultsDecoded.shift();\n  const parsedVals = outerResultsDecoded.reduce((acc, r) => {\n    r.forEach((results, idx) => {\n      const types = calls[idx].returnTypes;\n      const resultsDecoded = decodeParameters(types, results);\n      acc.push(\n        ...resultsDecoded.map((r, idx) => {\n          if (types[idx] === 'bool') return r.toString() === 'true';\n          return r;\n        })\n      );\n    });\n    return acc;\n  }, []);\n\n  const retObj = { blockNumber, original: {}, transformed: {} };\n\n  for (let i = 0; i < parsedVals.length; i++) {\n    const [name, transform] = returnDataMeta[i];\n    retObj.original[name] = parsedVals[i];\n    retObj.transformed[name] = transform !== undefined ? transform(parsedVals[i]) : parsedVals[i];\n  }\n\n  return { results: retObj, keyToArgMap };\n}\n","import WebSocket from 'isomorphic-ws';\nimport aggregate from './aggregate';\nimport { isEmpty } from './helpers';\nimport addresses from './addresses.json';\nimport debug from 'debug';\nconst log = debug('multicall');\n\nconst reWsEndpoint = /^wss?:\\/\\//i;\n\nfunction isNewState(type, value, store) {\n  return (\n    store[type] === undefined ||\n    (value !== null &&\n    store[type] !== null &&\n    typeof value === 'object' &&\n    typeof value.toString === 'function' &&\n    typeof store[type] === 'object' &&\n    typeof store[type].toString === 'function'\n      ? value.toString() !== store[type].toString()\n      : value !== store[type])\n  );\n}\n\nfunction prepareConfig(config) {\n  config = {\n    interval: 1000,\n    staleBlockRetryWait: 3000,\n    errorRetryWait: 5000,\n    wsResponseTimeout: 5000,\n    wsReconnectTimeout: 5000,\n    ...config\n  };\n  if (config.preset !== undefined) {\n    if (addresses[config.preset] !== undefined) {\n      config.multicallAddress = addresses[config.preset].multicall;\n      config.rpcUrl = addresses[config.preset].rpcUrl;\n    } else throw new Error(`Unknown preset ${config.preset}`);\n  }\n  return config;\n}\n\nexport default function createWatcher(model, config) {\n  const state = {\n    model: [...model],\n    store: {},\n    storeTransformed: {},\n    keyToArgMap: {},\n    latestPromiseId: 0,\n    latestBlockNumber: null,\n    id: 0,\n    listeners: {\n      subscribe: [],\n      block: [],\n      poll: [],\n      error: []\n    },\n    handler: null,\n    wsReconnectHandler: null,\n    watching: false,\n    config: prepareConfig(config),\n    ws: null\n  };\n\n  function reconnectWebSocket(timeout) {\n    clearTimeout(state.handler);\n    state.handler = null;\n    clearTimeout(state.wsReconnectHandler);\n    state.wsReconnectHandler = setTimeout(() => {\n      destroyWebSocket();\n      setupWebSocket();\n    }, timeout);\n  }\n\n  function setupWebSocket() {\n    if (reWsEndpoint.test(state.config.rpcUrl)) {\n      log(`Connecting to WebSocket ${state.config.rpcUrl}...`);\n      state.ws = new WebSocket(state.config.rpcUrl);\n      state.ws.onopen = () => {\n        log('WebSocket connected');\n        if (state.handler) throw new Error('Existing poll setTimeout handler set');\n        if (state.watching) {\n          poll.call({\n            state,\n            interval: 0,\n            resolveFetchPromise: state.initialFetchResolver\n          });\n        }\n      };\n      state.ws.onclose = err => {\n        log('WebSocket closed: %s', JSON.stringify(err));\n        log(`Reconnecting in ${state.config.wsReconnectTimeout / 1000} seconds.`);\n        reconnectWebSocket(state.config.wsReconnectTimeout);\n      };\n      state.ws.onerror = err => {\n        log('WebSocket error: %s', JSON.stringify(err));\n        log(`Reconnecting in ${state.config.wsReconnectTimeout / 1000} seconds.`);\n        reconnectWebSocket(state.config.wsReconnectTimeout);\n      };\n    }\n  }\n\n  function destroyWebSocket() {\n    log('destroyWebSocket()');\n    state.ws.onopen = null;\n    state.ws.onclose = null;\n    state.ws.onerror = null;\n    state.ws.onmessage = null;\n    state.ws.close();\n  }\n\n  setupWebSocket();\n\n  state.initialFetchPromise = new Promise(resolve => {\n    state.initialFetchResolver = resolve;\n  });\n\n  function subscribe(listener, id, batch = false) {\n    if (!isEmpty(state.storeTransformed)) {\n      const events = Object.entries(state.storeTransformed).map(([type, value]) => ({\n        type,\n        value,\n        args: state.keyToArgMap[type] || []\n      }));\n      batch ? listener(events) : events.forEach(listener);\n    }\n    state.listeners.subscribe.push({ listener, id, batch });\n  }\n\n  function alertListeners(events) {\n    if (!isEmpty(events))\n      state.listeners.subscribe.forEach(({ listener, batch }) =>\n        batch ? listener(events) : events.forEach(listener)\n      );\n  }\n\n  function poll() {\n    const interval = this.interval !== undefined ? this.interval : this.state.config.interval;\n    log('poll() called, %s%s', 'interval: ' + interval, this.retry ? ', retry: ' + this.retry : '');\n    this.state.handler = setTimeout(async () => {\n      try {\n        if (!this.state.handler) return;\n\n        this.state.latestPromiseId++;\n        const promiseId = this.state.latestPromiseId;\n\n        state.listeners.poll.forEach(({ listener }) =>\n          listener({\n            id: promiseId,\n            latestBlockNumber: this.state.latestBlockNumber,\n            ...(this.retry ? { retry: this.retry } : {})\n          })\n        );\n\n        const {\n          results: {\n            blockNumber,\n            original: { ...data },\n            transformed: { ...dataTransformed }\n          },\n          keyToArgMap\n        } = await aggregate(this.state.model, {\n          ...this.state.config,\n          ws: this.state.ws,\n          id: this.state.latestPromiseId\n        });\n\n        if (this.state.cancelPromiseId === promiseId) return;\n\n        if (typeof this.resolveFetchPromise === 'function') this.resolveFetchPromise();\n\n        if (this.state.latestBlockNumber !== null && blockNumber < this.state.latestBlockNumber) {\n          // Retry if blockNumber is lower than latestBlockNumber\n          log(\n            `Stale block returned, retrying in ${this.state.config.staleBlockRetryWait /\n              1000} seconds`\n          );\n          poll.call({\n            state: this.state,\n            interval: this.state.config.staleBlockRetryWait,\n            retry: this.retry ? this.retry + 1 : 1\n          });\n        } else {\n          if (\n            this.state.latestBlockNumber === null ||\n            (this.state.latestBlockNumber !== null && blockNumber > this.state.latestBlockNumber)\n          ) {\n            this.state.latestBlockNumber = parseInt(blockNumber);\n            state.listeners.block.forEach(({ listener }) => listener(this.state.latestBlockNumber));\n          }\n          const events = Object.entries(data)\n            .filter(([type, value]) => isNewState(type, value, this.state.store))\n            .map(([type]) => ({\n              type,\n              value: dataTransformed[type],\n              args: keyToArgMap[type] || []\n            }));\n          this.state.store = { ...data };\n          this.state.storeTransformed = { ...dataTransformed };\n          this.state.keyToArgMap = { ...keyToArgMap };\n          alertListeners(events);\n          poll.call({ state: this.state });\n        }\n      } catch (err) {\n        log('Error: %s', err.message);\n        state.listeners.error.forEach(({ listener }) => listener(err, this.state));\n        if (!this.state.handler) return;\n        // Retry on error\n        log(`Error occured, retrying in ${this.state.config.errorRetryWait / 1000} seconds`);\n        poll.call({\n          state: this.state,\n          interval: this.state.config.errorRetryWait,\n          retry: this.retry ? this.retry + 1 : 1\n        });\n      }\n    }, interval);\n  }\n\n  const watcher = {\n    tap(transform) {\n      log('watcher.tap() called');\n      const nextModel = transform([...state.model]);\n      state.model = [...nextModel];\n      return this.poll();\n    },\n    poll() {\n      log('watcher.poll() called');\n      let resolveFetchPromise;\n      const fetchPromise = new Promise(resolve => {\n        resolveFetchPromise = resolve;\n      });\n      if (state.watching && (!state.ws || state.ws.readyState === WebSocket.OPEN)) {\n        clearTimeout(state.handler);\n        state.handler = null;\n        poll.call({ state, interval: 0, resolveFetchPromise });\n        return fetchPromise;\n      }\n      return Promise.resolve();\n    },\n    subscribe(listener) {\n      const id = state.id++;\n      subscribe(listener, id, false);\n      return {\n        unsub() {\n          state.listeners.subscribe = state.listeners.subscribe.filter(({ id: _id }) => _id !== id);\n        }\n      };\n    },\n    batch() {\n      return {\n        subscribe(listener) {\n          const id = state.id++;\n          subscribe(listener, id, true);\n          return {\n            unsub() {\n              state.listeners.subscribe = state.listeners.subscribe.filter(({ id: _id }) => _id !== id);\n            }\n          };\n        }\n      };\n    },\n    onNewBlock(listener) {\n      const id = state.id++;\n      state.latestBlockNumber && listener(state.latestBlockNumber);\n      state.listeners.block.push({ listener, id });\n      return {\n        unsub() {\n          state.listeners.block = state.listeners.block.filter(({ id: _id }) => _id !== id);\n        }\n      };\n    },\n    onPoll(listener) {\n      const id = state.id++;\n      state.listeners.poll.push({ listener, id });\n      return {\n        unsub() {\n          state.listeners.poll = state.listeners.poll.filter(({ id: _id }) => _id !== id);\n        }\n      };\n    },\n    onError(listener) {\n      const id = state.id++;\n      state.listeners.error.push({ listener, id });\n      return {\n        unsub() {\n          state.listeners.error = state.listeners.error.filter(({ id: _id }) => _id !== id);\n        }\n      };\n    },\n    start() {\n      log('watcher.start() called');\n      state.watching = true;\n      if (!state.ws || state.ws.readyState === WebSocket.OPEN) {\n        poll.call({\n          state,\n          interval: 0,\n          resolveFetchPromise: state.initialFetchResolver\n        });\n      }\n      return state.initialFetchPromise;\n    },\n    stop() {\n      log('watcher.stop() called');\n      clearTimeout(state.handler);\n      state.handler = null;\n      clearTimeout(state.wsReconnectHandler);\n      state.wsReconnectHandler = null;\n      state.watching = false;\n    },\n    recreate(model, config) {\n      log('watcher.recreate() called');\n      clearTimeout(state.handler);\n      state.handler = null;\n      clearTimeout(state.wsReconnectHandler);\n      state.wsReconnectHandler = null;\n      if (state.ws) destroyWebSocket();\n      state.ws = null;\n      state.config = prepareConfig(config);\n      state.model = [...model];\n      state.store = {};\n      state.storeTransformed = {};\n      state.latestBlockNumber = null;\n      state.cancelPromiseId = state.latestPromiseId;\n      setupWebSocket();\n      if (state.watching && !state.ws) {\n        let resolveFetchPromise;\n        const fetchPromise = new Promise(resolve => {\n          resolveFetchPromise = resolve;\n        });\n        poll.call({\n          state,\n          interval: 0,\n          resolveFetchPromise\n        });\n        return fetchPromise;\n      }\n      return Promise.resolve();\n    },\n    awaitInitialFetch() {\n      return state.initialFetchPromise;\n    },\n    get initialFetch() {\n      return state.initialFetchPromise;\n    },\n    get schemas() {\n      return state.model;\n    }\n  };\n\n  return watcher;\n}\n"],"names":["log","debug","AGGREGATE_SELECTOR","strip0x","str","replace","encodeParameters","types","vals","defaultAbiCoder","encode","decodeParameters","decode","isEmpty","obj","Array","isArray","length","Object","keys","ethCall","rawData","id","web3","ethers","rpcUrl","block","chain","multicallAddress","ws","wsResponseTimeout","abiEncodedData","Promise","resolve","reject","send","JSON","stringify","jsonrpc","method","params","to","data","onMessage","json","parse","clearTimeout","timeoutHandle","onmessage","result","setTimeout","Error","eth","call","rawResponse","fetch","headers","body","content","INSIDE_EVERY_PARENTHESES","FIRST_CLOSING_PARENTHESES","_makeMulticallData","calls","values","map","target","args","returnTypes","keccak256","substr","a","calldata","components","type","name","makeMulticallData","memoize","aggregate","config","keyToArgMap","reduce","acc","returns","returnMeta","key","argValues","match","slice","argTypesString","returnTypesString","argTypes","split","filter","e","invariant","argValue","idx","callDataBytes","outerResults","returnTypeArray","ele","concat","returnDataMeta","outerResultsDecoded","blockNumber","shift","parsedVals","r","forEach","results","resultsDecoded","push","toString","retObj","original","transformed","i","transform","undefined","reWsEndpoint","isNewState","value","store","prepareConfig","interval","staleBlockRetryWait","errorRetryWait","wsReconnectTimeout","preset","addresses","multicall","createWatcher","model","state","storeTransformed","latestPromiseId","latestBlockNumber","listeners","subscribe","poll","error","handler","wsReconnectHandler","watching","reconnectWebSocket","timeout","destroyWebSocket","setupWebSocket","test","WebSocket","onopen","resolveFetchPromise","initialFetchResolver","onclose","err","onerror","close","initialFetchPromise","listener","batch","events","entries","alertListeners","retry","promiseId","dataTransformed","cancelPromiseId","parseInt","message","watcher","tap","nextModel","fetchPromise","readyState","OPEN","unsub","_id","onNewBlock","onPoll","onError","start","stop","recreate","awaitInitialFetch","initialFetch","schemas"],"mappings":"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"}